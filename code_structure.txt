class Model:
    def __init__(self, embeddings, BATCH_SIZE, SEQ_LEN, train, beta=4e-6)
    def __call__(self, x)

class DenseModel(Model):
    def forward(self)

class QRNNLayer:
    def __init__(self, input_size, conv_size, hidden_size, layer_id, pool='fo', zoneout=0.0, num_in_channels=1)
    def __call__(self, inputs, train=None)
    def conv(self, inputs)
    def unstack(self, gates, pooling)
    def fo_pool(self, gates)

class DenseLayer:
    def __init__(self, input_size, conv_size, hidden_size, layer_ids, num_layers, zoneout=0.0, dropout=0.0)
    def __call__(self, inputs, train=None)

def check_restore_parameters(sess, saver, checkpoint_path)
def get_embeddings(vocab, path, dim = 300)
def get_datasets(batch_size=100, num_words=1000, seq_len=100)

class imdbDataset(Dataset):
    def __init__(self, dataset, seq_len=100)
    def pad_inputs(self, seq_len)
    def get_masks(self, seq_len)
    def __len__(self)
    def __getitem__(self, i)
    
main:
    def run()